set -g prefix C-a
unbind C-b
bind C-a send-prefix

# rebind C-s to not save, too close to the choose session keybinding
bind C-s choose-tree -s -Z

# set-option -g status-left '#P'


# set mark with ctrl + a + m, then recover with ctrl + a + `
bind \` switch-client -t'{marked}'

# make it so that the numbers reset upon moving
set -g renumber-windows on

# join panes back : D, this is the opposite of ctrl+ a + !
bind j choose-window 'join-pane -h -s "%%"'
bind J choose-window 'join-pane -s "%%"'

# nvim fix for colors
set-option -sa terminal-overrides ',xterm-256color:RGB'
# set-option -ga terminal-overrides ',xterm-256color:Tc'

# make it so that new pane is opened from current directory

bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

#### START STYLE
# Style inspired by hamvocke's dotfile project: https://github.com/hamvocke/dotfiles

  ######################
  ### DESIGN CHANGES ###
  ######################

  # loud or quiet?
  set -g visual-activity off
  set -g visual-bell off
  set -g visual-silence off
  setw -g monitor-activity off
  set -g bell-action none

  #  modes
  setw -g clock-mode-colour colour34
  setw -g mode-style 'fg=colour57 bg=colour22 bold'

  # panes
  set -g pane-border-style 'fg=colour56 bg=default'
  # set -g pane-border-style 'fg=colour56 bg=colour57'
  # set -g pane-border-style 'fg=colour28 bg=colour0'
  set -g pane-active-border-style 'bg=default fg=colour71'
  # set -g pane-active-border-style 'bg=colour71 fg=colour71'
  # set -g pane-active-border-style 'bg=colour56 fg=colour57'

  # statusbar
  set -g status-position bottom
  set -g status-justify left
  set -g status-style 'bg=colour234 fg=colour34 dim'
  set -g status-left "#[fg=colour34,bg=colour233] Session: #S"
  set -g status-right '#[fg=colour34,bg=colour233] #(TZ="US/Pacific" date +%%a\ %%m/%%d/%%y) #[fg=colour34,bg=colour235] #(TZ="US/Pacific" date +%%H:%%M:%%S) '
  set -g status-right-length 50
  set -g status-left-length 50

  setw -g window-status-current-style 'fg=colour201 bg=colour233 bold'
  setw -g window-status-current-format '#I#[fg=colour250]:#[fg=colour34]#W#[fg=colour249]#F '

  setw -g window-status-style 'fg=colour201 bg=colour234'
  setw -g window-status-format ' #I#[fg=colour34]:#[fg=colour34]#W#[fg=colour34]#F '

  setw -g window-status-bell-style 'fg=colour255 bg=colour57 bold'

  # messages
  set -g message-style 'fg=colour34 bg=colour234 bold'

#### END STYLE


# tmux source-file ~/.tmux.conf

# status bar
set-option -g status on
set -g status-interval 2
set -g status-justify centre
set-option -g status-position top

# reload ~/.tmux.conf file
bind e source-file ~/.tmux.conf \; display "Reloaded!"


# movement between panes

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/powerline'
set -g @plugin 'tmux-plugins/tmux-yank'


# Resurrect options
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'
# was too close before to the list session
set -g @resurrect-save 'S'


# continuum options
set -g @continuum-restore 'on' # automatically restore on first open

# VIMTMUX_NAV START
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# VIMTMUX_NAV END

# Copy-Paste -- requires tmux-yank
set-window-option -g mode-keys vi
set-option -g mouse on
set-option -s set-clipboard on
bind -Tcopy-mode-vi y send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c" \; display-message "copied to system clipboard"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -se c -i"

# sync with github: C-a C-g, don't have to lift the ctrl key this way :)
bind C-g run ~/.tmux/tmux_github_sync.sh

# Usage notes
# c-a ; goes to last pane
# c-a a goes to last window
# c-a L goes to last session

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

bind-key -n C-S-Left swap-window -t -1\; select-window -t -1
bind-key -n C-S-Right swap-window -t +1\; select-window -t +1

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
